<!DOCTYPE html>

<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<style>
canvas {
    background-color: black;
}
</style>
</head>
<body onload="startGame()">
<script>

let myGamePiece;
let myObstacles = [];
let myScore;
 let lives = 3;

function component(width, height, color, x, y, type) {
    this.type = type;
    this.width = width;
    this.height = height;
    this.speedX = 0;
    this.speedY = 0;    
    this.x = x;
    this.y = y;    
    this.update = function() {
        ctx = myGameArea.context;
        if (this.type == "text") {
            ctx.font = this.width + " " + this.height;
            ctx.fillStyle = color;
            ctx.fillText(this.text, this.x, this.y);
        } else {
            ctx.fillStyle = color;
            ctx.fillRect(this.x, this.y, this.width, this.height);
        }
    }
    this.newPos = function() {
        this.x += this.speedX;
        this.y += this.speedY;        
    }
    this.crashWith = function(otherobj) {
        var myleft = this.x;
        var myright = this.x + (this.width);
        var mytop = this.y;
        var mybottom = this.y + (this.height);
        var otherleft = otherobj.x;
        var otherright = otherobj.x + (otherobj.width);
        var othertop = otherobj.y;
        var otherbottom = otherobj.y + (otherobj.height);
        var crash = true;
        if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
            crash = false;
        }
        return crash;
    }
}
var myGameArea = {
    canvas : document.createElement("canvas"),
    start : function() {
        this.canvas.width = 580;
        this.canvas.height = 370;
        this.context = this.canvas.getContext("2d");
        document.body.insertBefore(this.canvas, document.body.childNodes[0]);
        this.frameNo = 0;
        this.interval = setInterval(updateGameArea, 20);
        window.addEventListener('keydown', function (e) {
            e.preventDefault();
            myGameArea.keys = (myGameArea.keys || []);
            myGameArea.keys[e.keyCode] = (e.type == "keydown");
        })
        window.addEventListener('keyup', function (e) {
            myGameArea.keys[e.keyCode] = (e.type == "keydown");
        })
        },
    clear : function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    },
    stop : function() {
        clearInterval(this.interval);
    }
}

function updateGameArea() {
    var x, height, gap, minHeight, maxHeight, minGap, maxGap;
    let lives = 3;

    for (i = 0; i < myObstacles.length; i += 1) {
        myScore.text="SCORE: " + myGameArea.frameNo + " Lives:" + lives;
        if (myGamePiece.crashWith(myObstacles[i]) && lives<0) {
           myGameArea.stop();
           
        } 
       else{
               --lives;
               
           
    }
    }
    myGameArea.clear();
    myGameArea.frameNo += 1;
    if (myGameArea.frameNo == 1 || interval(150)) {
        x = myGameArea.canvas.width;
        minHeight = 20;
        maxHeight = 200;
        height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
        minGap = 50;
        maxGap = 200;
        gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
        myObstacles.push(new component(10, height, "green", x, 0));
        myObstacles.push(new component(10, x - height - gap, "green", x, height + gap));
    }
    for (i = 0; i < myObstacles.length; i += 1) {
        myObstacles[i].speedX = -1;
        myObstacles[i].newPos();
        myObstacles[i].update();
    }
        if (myGameArea.keys && myGameArea.keys[37]) {myGamePiece.x -= 1; }
    if (myGameArea.keys && myGameArea.keys[39]) {myGamePiece.x += 1; }
    if (myGameArea.keys && myGameArea.keys[38]) {myGamePiece.y-= 1; }
    if (myGameArea.keys && myGameArea.keys[40]) {myGamePiece.y+= 1; }
    myGamePiece.x += myGamePiece.speedX;
        myGamePiece.y += myGamePiece.speedY; 
    
    myScore.update();
    myGamePiece.newPos();    
    myGamePiece.update();
}

function interval(n) {
    if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
    return false;
}

  function startGame() {
    myGamePiece = new component(30, 30, "purple", 10, 120);
    myScore = new component("20px", "Consolas", "white", 270, 40, "text");
    myGameArea.start();
}

</script>
</body>
</html>
// sample code was taken for w3schools as reference;